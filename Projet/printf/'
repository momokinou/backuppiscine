/* ************************************************************************** */
/*                                                          LE - /            */
/*                                                              /             */
/*   printftest.c                                     .::    .:/ .      .::   */
/*                                                 +:+:+   +:    +:  +:+:+    */
/*   By: qmoricea <marvin@le-101.fr>                +:+   +:    +:    +:+     */
/*                                                 #+#   #+    #+    #+#      */
/*   Created: 2018/11/19 10:31:29 by qmoricea     #+#   ##    ##    #+#       */
/*   Updated: 2018/12/04 10:50:15 by qmoricea    ###    #+. /#+    ###.fr     */
/*                                                         /                  */
/*                                                        /                   */
/* ************************************************************************** */

#include "libftprintf.h"
#include <unistd.h>
#include <stdarg.h>
#include <wchar.h>
#include <stdlib.h>
#define HEX "0123456789abcdef"
#define HEXM "0123456789ABCDEF"

void		ft_putchar(char c)
{
	write(1, &c, 1);
}

void		ft_putchar_fd(char c, int fd)
{
	write(fd, &c, 1);
}

size_t		ft_strlen(const char *s)
{
	int i;

	i = 0;
	while (s[i])
	{
		i++;
	}
	return (i);
}

void		ft_putstr(char const *s)
{
	int i;

	i = 0;
	if (!s)
		return ;
	while (s[i])
	{
		ft_putchar(s[i]);
		i++;
	}
}

void		ft_putnbr_fd(intmax_t n, int fd)
{
	uintmax_t x;

	x = n;
	if (n < 0)
	{
		ft_putchar_fd('-', fd);
		x = -n;
	}
	if (x >= 10)
	{
		ft_putnbr_fd(x / 10, fd);
		ft_putnbr_fd(x % 10, fd);
	}
	else
		ft_putchar_fd(x + '0', fd);
}

void		ft_putnbr(intmax_t n)
{
	ft_putnbr_fd(n, 1);
}

int			ft_putunbr_fd(intmax_t n, int fd)
{
	uintmax_t x;
	uintmax_t negret;

	x = n;
	negret = n;
	if (n < 0)
	{
		x = 4294967296 + n;
		negret = 4294967296 + n;
	}
	if (x >= 10)
	{
		ft_putnbr_fd(x / 10, fd);
		ft_putnbr_fd(x % 10, fd);
	}
	else
		ft_putchar_fd(x + '0', fd);
	return (ft_intlenc(negret, 0));
}

int			ft_putunbr(intmax_t n)
{
	return (ft_putunbr_fd(n, 1));

}

int			ft_intlenc(unsigned int n, int i)
{
	if (n >= 10)
		return (ft_intlenc(n / 10, i + 1));
	else
		return (i + 1);
	return (0);
}

int			ft_intlen(int n)
{
	int				len;
	unsigned int	i;

	if (n < 0)
		i = n * -1;
	else
		i = n;
	len = ft_intlenc(i, 0);
	if (n < 0)
		len = len + 1;
	else
		len = len + 0;
	return (len);
}

int			ft_putnbr_ld(long n)
{
	int stock;

	stock = n;
	if (n == -9223372036854775807)
		ft_putstr("-9223372036854775807");
	else if (n < 0)
	{
		n = -n;
		ft_putchar('-');
		ft_putnbr(n);
	}
	else if (n >= 10)
	{
		ft_putnbr_ld(n / 10);
		ft_putnbr_ld(n % 10);
	}
	else
		ft_putchar('0' + n);
	return (ft_intlen(stock));
}

int			ft_putunbr_ld(long long n)
{
	int negret;

	negret = n;
	if (n == -9223372036854775807)
		ft_putstr("9223372036854775809");
	else if (n < 0)
		n = 9223372036854775807 + n;
	else if (n >= 10)
	{
		ft_putnbr_ld(n / 10);
		ft_putnbr_ld(n % 10);
	}
	else
		ft_putchar('0' + n);
	if (negret < 0)
		return (19);
	return (ft_intlen(negret));
}

int			ft_putnbr_hd(short n)
{
	int stock;

	stock = n;
	if (n == -32767)
		ft_putstr("-32767");
	else if (n < 0)
	{
		n = -n;
		ft_putchar('-');
		ft_putnbr(n);
	}
	else if (n >= 10)
	{
		ft_putnbr_hd(n / 10);
		ft_putnbr_hd(n % 10);
	}
	else
		ft_putchar('0' + n);
	return (ft_intlen(stock));
}

int			ft_putunbr_hd(short n)
{
	int stock;
	int x;

	stock = n;
	x = n;
	if (n == -32767)
		ft_putstr("-32767");
	else if (n < 0)
	{
		x = 65536 + n;
		stock = 65536 + n;
	}
	if (x >= 10)
	{
		ft_putunbr_hd(x / 10);
		ft_putunbr_hd(x % 10);
	}
	else
		ft_putnbr(x);
	return (ft_intlen(stock));
}

int			ft_isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

int			ft_isspace(int c)
{
	return ((9 <= c && c <= 13) || c == 32);
}

int			ft_atoi(const char *format, int i)
{
	int n;
	int isneg;

	isneg = 0;
	n = 0;
	while ((format[i] >= 9 && format[i] <= 13) || format[i] == 32)
		i++;
	while (format[i] == '+' || format[i] == '%' || format[i] == '0'
			|| format[i] == '.' || format[i] == '-' || format[i] == '#')
		i++;
	if (format[i] == '-')
	{
		isneg = 1;
		i++;
	}
	while (format[i] && format[i] >= '0' && format[i] <= '9')
	{
		n = n * 10 + (format[i++] - '0');
	}
	if (isneg)
		return (-n);
	else
		return (n);
}
